import React, {useContext, useState, useEffect} from 'react'
import {Redirect} from 'react-router-dom'

import useAuth from 'hooks/useAuth'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'components/BackendErrorMessages'
import SuccessMessage from 'components/SuccessMessage'

const Settings = () => {
  const [currentUserState, dispatch] = useContext(CurrentUserContext)
  const [{response, error}, authentication] = useAuth()

  const [isSuccessFullLogout, setIsSuccessFullLogout] = useState(false)
  const [isSuccessUpdate, setIsSuccessUpdate] = useState(false)

  const [image, setImage] = useState('')
  const [username, setUsername] = useState('')
  const [bio, setBio] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = e => {
    e.preventDefault()
    authentication({
      isLogin: 'updateUser',
      image, username, bio, email, password,
      uid: currentUserState.currentUser.uid,
      updateEmail: currentUserState.currentUser.email !== email
    })
  }

  const logout = e => {
    e.preventDefault()
    authentication({isLogin: 'logout'})
    dispatch({type: 'LOGOUT'})
    setIsSuccessFullLogout(true)
  }

  useEffect(() => {
    if (!currentUserState.currentUser) return

    setImage(currentUserState.currentUser.photoURL || '')
    setUsername(currentUserState.currentUser.username)
    setBio(currentUserState.currentUser.bio || '')
    setEmail(currentUserState.currentUser.email)

  }, [currentUserState.currentUser])

  useEffect(() => {
    if (!response) return
    dispatch({type: 'AUTHORIZED', payload: response})
    console.log(response)
    setIsSuccessUpdate(true)
  }, [response])

  if (isSuccessFullLogout) {
    return <Redirect to={'/login'}/>
  }

  return (
    <div className={'settings-page'}>
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className={'text-xs-center'}>Your settings</h1>
            {!error && isSuccessUpdate && <SuccessMessage text={'Update success!'}/>}
            {error && <BackendErrorMessages backendErrors={error.message}/>}

            <form onSubmit={handleSubmit}>
              <fieldset>
                <fieldset className={'form-group'}>
                  <input
                    value={image}
                    onChange={e => setImage(e.target.value)}
                    type="text"
                    className={'form-control form-control-lg'}
                    placeholder={'URL of profile picture'}/>
                </fieldset>
                <fieldset className={'form-group'}>
                  <input
                    value={username}
                    onChange={e => setUsername(e.target.value)}
                    type="text"
                    className={'form-control form-control-lg'}
                    placeholder={'Username'}/>
                </fieldset>
                <fieldset className={'form-group'}>
                <textarea
                  value={bio}
                  onChange={e => setBio(e.target.value)}
                  className={'form-control form-control-lg'}
                  rows={8}
                  placeholder={'Short bio'}
                />
                </fieldset>
                <fieldset className={'form-group'}>
                  <input
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    type="text"
                    className={'form-control form-control-lg'}
                    placeholder={'Email'}/>
                </fieldset>
                {/*<fieldset className={'form-group'}>
                  <input
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    type="password"
                    className={'form-control form-control-lg'}
                    placeholder={'Password'}/>
                </fieldset>*/}
                <button
                  type={'submit'}
                  className={'btn btn-lg btn-primary pull-xs-right'}>
                  Update Settings
                </button>
              </fieldset>
            </form>
            <hr/>
            <button className={'btn btn-outline-danger'} onClick={logout}>
              logout
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Settings

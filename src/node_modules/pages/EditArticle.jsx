import React, {useEffect, useState, useContext} from 'react'
import {Redirect} from 'react-router-dom'
import ArticleForm from 'components/ArticleForm'
import useFirebase from 'hooks/useFirebase'
import useFirebaseSet from 'hooks/useFirebaseSet'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {
  const slug = match.params.slug
  const [{response: fetchResponse}, dbGet, dispatchGet] = useFirebase()
  const [{response: updateArticleResponse, error: updateError}, dbSet] = useFirebaseSet()
  const [initialValue, setInitialValue] = useState(null)
  const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false)
  const [currentUserState] = useContext(CurrentUserContext)

  const handleSubmit = body => {
    dbSet({
      url: '/posts', body, id: slug,
    })
  }

  useEffect(() => {
    dispatchGet({
      type: 'GET_ONE_POST',
      payload: slug
    })
    dbGet()
  }, [dbGet])

  useEffect(() => {
    if (!fetchResponse) {
      return
    }
    const post = fetchResponse.posts[0][0]

    setInitialValue({
      title: post.title,
      description: post.description,
      body: post.body,
      tagList: post.tagList,
      createdAt: post.createdAt
    })
  }, [fetchResponse])

  useEffect(() => {
    if (!updateArticleResponse) return

    setIsSuccessFullSubmit(true)
  }, [updateArticleResponse])

  if (currentUserState.isLoggedIn === false) {
    return <Redirect to={`/`}/>
  }

  if (isSuccessFullSubmit) {
    return <Redirect to={`/articles/${slug}`}/>
  }

  return (
    <div>
      <ArticleForm
        onSubmit={handleSubmit}
        errors={(updateError && updateError)}
        initialValue={initialValue}
      />
    </div>
  )
}

export default EditArticle

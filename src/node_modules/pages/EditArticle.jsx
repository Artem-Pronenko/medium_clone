import React, {useEffect, useState, useContext} from 'react'
import {Redirect} from 'react-router-dom'
import ArticleForm from 'components/ArticleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {
  const slug = match.params.slug
  const apiUrl = `/articles/${slug}`
  const [{response: fetchResponse}, doFetchArticle] = useFetch(apiUrl)
  const [
    {
      response: updateArticleResponse,
      error: updateError
    }, doFetchUpdate] = useFetch(apiUrl)
  const [initialValue, setInitialValue] = useState(null)
  const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false)
  const [currentUserState] = useContext(CurrentUserContext)

  const handleSubmit = (article) => {
    console.log('handle', article)
    doFetchUpdate({
      method: 'PUT',
      data: {
        article
      }
    })
  }

  useEffect(() => {
    doFetchArticle()
  }, [doFetchArticle])

  useEffect(() => {
    if (!fetchResponse) {
      return
    }

    setInitialValue({
      title: fetchResponse.article.title,
      description: fetchResponse.article.description,
      body: fetchResponse.article.body,
      tagList: fetchResponse.article.tagList
    })
  }, [fetchResponse])

  useEffect(() => {
    if (!updateArticleResponse) return

    setIsSuccessFullSubmit(true)
  }, [updateArticleResponse])

  if (currentUserState.isLoggedIn === false) {
    return <Redirect to={`/`}/>
  }

  if (isSuccessFullSubmit) {
    return <Redirect to={`/articles/${slug}`}/>
  }

  return (
    <div>
      <ArticleForm
        onSubmit={handleSubmit}
        errors={(updateError && updateError.errors) || {}}
        initialValue={initialValue}
      />
    </div>
  )
}

export default EditArticle

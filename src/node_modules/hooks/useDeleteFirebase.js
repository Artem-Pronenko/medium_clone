import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'
import 'firebase/firestore'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})
  const firestore = firebase.firestore()

  const doDeleteArticle = useCallback((options = {}) => {
    setOptions({...options})
    setIsLoading(true)
  }, [])

  useEffect(() => {
    ;(async () => {
      try {
        const url = options.url
        const id = options.id
        await firestore
          .collection(url)
          .doc(id)
          .delete()
        setResponse({type: 'deleted success'})
      } catch (e) {
        setError(e)
      } finally {
        setIsLoading(false)
      }
    })()
    return () => {
    }
  }, [isLoading, options])

  return [{isLoading, response, error}, doDeleteArticle]

}

import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'
import 'firebase/firestore'
import useAuthChecker from './useAuthChecker'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})
  const [authUser] = useAuthChecker()

  const setDB = useCallback((options = {}) => {
    setOptions({
      ...options,
      authUser
    })
    setIsLoading(true)
  }, [])

  useEffect(() => {
    ;(async () => {
      const db = firebase.firestore()
      if (!isLoading || !authUser) return

      const post = {
        "createdAt": Date.now(),
        "description": "description information",
        "id": 5,
        "tagList": "tag1, tag2",
        "title": "Post 5",
        "userUid": "iXIZq0DQ5DNPMLnVM4GmWtN64gG2"
      }

      try {
        await db
          .collection(`posts`)
          .add(post)
        setResponse('success!')
      } catch (e) {
        setError(e)
      } finally {
        setIsLoading(false)
      }
    })()
  }, [isLoading, options, authUser])

  return [{isLoading, response, error}, setDB]

}

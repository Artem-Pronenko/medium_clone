import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'
import 'firebase/firestore'
import useAuthChecker from './useAuthChecker'
import {v4 as uuidv4} from 'uuid'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [uuid, setUuid] = useState('')
  const [options, setOptions] = useState({})
  const [authUser] = useAuthChecker()
  const firestore = firebase.firestore()

  const setDB = useCallback((options = {}) => {
    setOptions({
      ...options,
      authUser
    })
    setUuid(uuidv4())
    setIsLoading(true)
  }, [])

  useEffect(() => {
    ;(async () => {
      if (!isLoading || !authUser) return
      try {
        await firestore
          .collection(options.url)
          .add({
            ...options.body,
            tagList: options.body.tagList.split(','),
            createdAt: Date.now(),
            id: uuid,
            userUid: authUser.uid,
            username: authUser.username
          })
        setResponse({type: 'success', uuid})
      } catch (e) {
        setError(e)
      } finally {
        setIsLoading(false)
      }
    })()
    return () => {
    }
  }, [isLoading, options, authUser])

  return [{isLoading, response, error}, setDB]

}

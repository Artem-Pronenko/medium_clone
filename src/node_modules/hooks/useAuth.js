import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})

  const authentication = useCallback(options => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  const signIn = async () => {
    try {
      const newUser = await firebase
        .auth()
        .signInWithEmailAndPassword(options.email, options.password)
      setResponse(newUser)
      console.log('signIn user')
    } catch (e) {
      setError(e)
    } finally {
      setIsLoading(false)
    }
  }

  const createUser = async () => {
    try {
      const newUser = await firebase
        .auth()
        .createUserWithEmailAndPassword(options.email, options.password)
      await firebase
        .database()
        .ref(`/users/${newUser.user.uid}/info`)
        .set({
          username: options.username,
          photoURL: 'https://via.placeholder.com/100x100',
          email: options.email
        })
      setResponse(newUser)
      console.log('create user')
    } catch (e) {
      setError(e)
    } finally {
      setIsLoading(false)
    }
  }

  const updateUser = async () => {
    try {
      const user = firebase.auth().currentUser
      if (options.updateEmail && !options.email) {
        setError({
          message: 'Email cannot be empty'
        })
        return
      }

      if (options.updateEmail) {
        await user.updateEmail(options.email)
      }

      const mainData = {
        username: options.username,
        photoURL: options.image || 'https://via.placeholder.com/100x100',
        email: options.email
      }
      await user.updateProfile(mainData)
      await firebase
        .database()
        .ref(`/users/${options.uid}/info`)
        .set({...mainData, bio: options.bio})
      setResponse({
        ...user,
        ...mainData,
        bio: options.bio
      })
      console.log('updateUser')
    } catch (e) {
      setError(e)
    } finally {
      setIsLoading(false)
    }
  }

  const logout = async () => {
    try {
      await firebase.auth().signOut()
    } catch (e) {
      setError(e)
    } finally {
      setIsLoading(false)
    }
  }
  const getUser = async () => {
    try {
      const userData = await firebase
        .database()
        .ref(`/users/${options.uid}/info`)
        .get()
      const userInfo = userData.val()
      setResponse(userInfo)
    } catch (e) {
      setError(e)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    if (!isLoading) return
    switch (options.isLogin) {
      case 'login':
        signIn()
        break
      case 'register':
        createUser()
        break
      case 'updateUser':
        updateUser()
        break
      case 'logout':
        logout()
        break
      case 'getUser':
        getUser()
        break
    }

  }, [isLoading, options])

  return [{isLoading, response, error}, authentication]

}

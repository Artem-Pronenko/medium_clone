import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})

  const db = useCallback(options => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  useEffect(() => {
    (async () => {
      //firebase.auth().signOut().then()
      if (!isLoading) return
      try {
        const res = await firebase.firestore()
          .collection(`posts/userPosts${options.userRef}`)
          .orderBy('createdAt')
          .get()
        const data = []
        let wrapper = []
        let i = 0
        res.forEach(doc => {
          if (i % 2 === 0) {
            wrapper = []
            data.push(wrapper)
          }
          wrapper.push(doc.data())
          i++
        })

        setResponse({posts: data, countLength: res.size})
      } catch (e) {
        setError(e)
        console.log(e)
      } finally {
        setIsLoading(false)
      }
    })()
    return () => {
    }
  }, [isLoading, options])

  return [{isLoading, response, error}, db]

}

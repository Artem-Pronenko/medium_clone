import {useState, useEffect, useCallback, useReducer} from 'react'
import firebase from 'firebase/app'
import reducer from 'reducerFirebase'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const firestore = firebase.firestore()
  const [state, dispatch] = useReducer(reducer, {})

  //firebase.auth().signOut().then()
  const dbGet = useCallback(() => {
    setIsLoading(true)
  }, [])

  const parseData = res => {
    const data = []
    let wrapper = []
    let i = 0
    res.forEach(doc => {
      if (i % 2 === 0) {
        wrapper = []
        data.push(wrapper)
      }
      wrapper.push(doc.data())
      i++
    })

    setResponse({posts: data, countLength: res.size})
  }


  const processingPost = async () => {
    const {orderBy, url} = state
    const res = await firestore
      .collection(`${url}`)
      .orderBy(orderBy)
      .get()
    parseData(res)
  }

  const processingPostFilter = async () => {
    const {orderBy, url, userFilter: {fieldPath, opStr, value}} = state
    const res = await firestore
      .collection(`${url}`)
      .orderBy(orderBy)
      .where(fieldPath, opStr, value)
      .get()
    parseData(res)
  }

  const processingTags = async () => {
    const res = await firestore
      .collection(`${state.url}`)
      .orderBy(state.orderBy)
      .get()
    const data = []
    res.forEach(doc => data.push(doc.data()))
    setResponse({tags: data.reverse(), countLength: res.size})
  }

  const processingOnePost = async () => {
    const {url, userFilter: {fieldPath, opStr, value}} = state
    const res = await firestore
      .collection(`${url}`)
      .where(fieldPath, opStr, value)
      .get()
    parseData(res)
  }


  useEffect(() => {
    if (!isLoading) return
    try {
      switch (state.filter) {
        case 'TAGS_POST':
          processingPostFilter()
          break
        case 'TAGS':
          processingTags()
          break
        case 'ALL_POSTS':
          processingPost()
          break
        case 'GET_ONE_POST':
          processingOnePost()
      }
    } catch (e) {
      setError(e)
      console.error(e)
    } finally {
      setIsLoading(false)
    }
    return () => {
    }
  }, [isLoading, setError, setIsLoading])

  return [{isLoading, response, error}, dbGet, dispatch]

}

import {useState, useEffect, useCallback} from 'react'
import firebase from 'firebase/app'

export default () => {
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})
  const firestore = firebase.firestore()

  const db = useCallback(options => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  const parseData = (res) => {
    const data = []
    let wrapper = []
    let i = 0
    res.forEach(doc => {
      if (i % 2 === 0) {
        wrapper = []
        data.push(wrapper)
      }
      wrapper.push(doc.data())
      i++
    })

    setResponse({posts: data, countLength: res.size})
  }


  const processingPost = async () => {
    const {orderBy, url} = options
    const res = await firestore
      .collection(`${url}`)
      .orderBy(orderBy)
      .get()
    parseData(res)
  }

  const processingPostFilter = async () => {
    const {orderBy, url, userFilter: {fieldPath, opStr, value}} = options
    const res = await firestore
      .collection(`${url}`)
      .orderBy(orderBy)
      .where(fieldPath, opStr, value)
      .get()
    parseData(res)
  }

  const processingTags = async () => {
    const res = await firestore
      .collection(`${options.url}`)
      .orderBy(options.orderBy)
      .get()
    const data = []
    res.forEach(doc => {
      data.push(doc.data())
    })
    setResponse({tags: data.reverse(), countLength: res.size})
  }

  useEffect(() => {
    if (!isLoading) return
    try {
      if (options.filter === 'tagsPost') {
        processingPostFilter()
      } else if (options.filter === 'tags') {
        processingTags()
      } else if (options.filter === 'allPosts') {
        processingPost()
      }

    } catch (e) {
      setError(e)
      console.error(e)
    } finally {
      setIsLoading(false)
    }
    return () => {
    }
  }, [isLoading, options])

  return [{isLoading, response, error}, db]

}
